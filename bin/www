#!/usr/bin/env node

/**
 * Module dependencies.
 */
let log4js = require("log4js");
let open = require("open");
let fs = require("fs");
let app = require("../app");
let debug = require("debug")("node-web:server");
let https = require("https");
var options = {
    key  : fs.readFileSync('./cert/214593159680478.key'),
    cert : fs.readFileSync('./cert/214593159680478.pem')
}
let socketService = require("../service/socketService");

try {
    require("fs").mkdirSync("./log");
} catch (e) {
    if (e.code !== "EEXIST") {
        console.error("Could not set up log directory, error was: ", e);
        process.exit(1);
    }
}
log4js.configure("./config/log4js.json");
let log = log4js.getLogger("startup");
/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || "5001");
app.set("port", port);

/**
 * Create HTTP server.
 */

let server = https.createServer(options,app);
socketService(server);
// webRtcService(server);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);
log.info("Express server listening on port ", server.address().port, " with pid ", process.pid);
console.log("Express server listening on port ", server.address().port, " with pid ", process.pid);
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== "listen") {
        throw error;
    }

    let bind = typeof port === "string"
        ? "Pipe " + port
        : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
    case "EACCES":
        console.error(bind + " requires elevated privileges");
        process.exit(1);
        break;
    case "EADDRINUSE":
        console.error(bind + " is already in use");
        process.exit(1);
        break;
    default:
        throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    let addr = server.address();
    const bind = typeof addr === "string"
        ? "pipe " + addr
        : "port " + addr.port;
    debug("Listening on " + bind);
    open("http://localhost:" + addr.port + "/#/roomid/1");
}
